#!/usr/bin/env python3

import argparse
import getpass
import sys
import os

from ep_operations.internal_api import companies, operating_systems, psm
from ep_operations.external_api import gateways, models, applications, files, devices, os_campaign, file_campaign, \
    apps_campaign

# Base URIs

TEST_BASE_URI = "http://19415348669c.ngrok.io"  # "http://homestead.test"
STAGING_BASE_URI = "https://staging-eu.syntheticbrain.cloud"
PRODUCTION_BASE_URI = "https://edgehog.cloud"


def main():
    used_base_url = STAGING_BASE_URI

    try:
        parser = argparse.ArgumentParser(description='Edgehog Portal Command Line Interface')
        parser.add_argument('-v', '--version', action='version', version='%(prog)s 1.0b')

        subparsers = parser.add_subparsers(help='operators help', dest='operation')
        subparsers.required = True

        # binding parser
        binding_parser = subparsers.add_parser('binding', help='Binding parameters')
        add_common_params(binding_parser)
        binding_parser.add_argument('--company', nargs='?', type=str, help='Company code')
        binding_parser.add_argument('--hardwareid', nargs='?', metavar='16 CHAR', type=str, help='Gateway CPU id')
        binding_parser.add_argument('--serialnumber', nargs='?', metavar='K... CODE', type=str,
                                    help='Gateway Serial Number')
        binding_parser.add_argument('-i', '--input', nargs='?', type=argparse.FileType('r'), const='./input.csv',
                                    default=None, help='Input CSV files containing values for the requested operation')
        binding_parser.add_argument('-o', '--output', nargs='?', type=argparse.FileType('w'), const='./output.json',
                                    default=None, help='Output files containing server responses')
        binding_parser.add_argument('--dryrun', help='Remove binding after insert', action='store_true')

        # deregister parser
        deregister_parser = subparsers.add_parser('deregister', help='Deregister gateway')
        add_common_params(deregister_parser)
        deregister_parser.add_argument('--hardwareid', nargs='?', metavar='16 CHAR', type=str, help='Gateway CPU id')
        deregister_parser.add_argument('-i', '--input', nargs='?', type=argparse.FileType('r'), const='./input.csv',
                                       default=None,
                                       help='Input CSV files containing values for the requested operation')
        deregister_parser.add_argument('-o', '--output', nargs='?', type=argparse.FileType('w'), const='./output.json',
                                       default=None, help='Output files containing server responses')

        # companies parser
        companies_parser = subparsers.add_parser('companies', help='List all available companies')
        companies_subparsers = companies_parser.add_subparsers(help='Operations on Companies API', dest='action')
        companies_subparsers.required = True
        # company list
        companies_list_parser = companies_subparsers.add_parser('list', help='List companies')
        add_common_params(companies_list_parser)
        # company get os
        companies_get_os_parser = companies_subparsers.add_parser('getos', help='List os associated to the company')
        add_common_params(companies_get_os_parser)
        companies_get_os_parser.add_argument('--companycode', required=True, type=str, help='Company code')
        # company add os
        companies_add_os_parser = companies_subparsers.add_parser('addos', help='Add OS to a company')
        add_common_params(companies_add_os_parser)
        companies_add_os_parser.add_argument('--companycode', required=True, type=str, help='Company code')
        companies_add_os_parser.add_argument('--oscode', required=True, type=str, help='Operating System code')

        # os parser
        os_parser = subparsers.add_parser('os', help='Operation on Operating system API')
        os_subparsers = os_parser.add_subparsers(help='OS operation help', dest='action')
        os_subparsers.required = True
        # os list parser
        os_list_parser = os_subparsers.add_parser('list', help='List Operating Systems')
        add_common_params(os_list_parser)
        os_list_parser.add_argument('--codeid', type=str, help='Operating System\'s code associated to release')
        # os create parser
        os_create_parser = os_subparsers.add_parser('create', help='Create new Operating System')
        add_common_params(os_create_parser)
        os_create_parser.add_argument('--codeid', required=True, type=str, help='Operating System code')
        os_create_parser.add_argument('--name', required=True, type=str, help='Operating System name')
        os_create_parser.add_argument('--description', required=True, type=str, help='Operating System description')
        os_create_parser.add_argument('--url', required=True, type=str, help='Operating System URL')

        # releases parser
        releases_parser = subparsers.add_parser('releases', help='Operations on Releases API')
        releases_subparsers = releases_parser.add_subparsers(help='Releases operation help', dest='action')
        releases_subparsers.required = True
        # release list parser
        releases_list_parser = releases_subparsers.add_parser('list', help='List releases')
        add_common_params(releases_list_parser)
        releases_list_parser.add_argument('--osid', type=str, help='Operating System\'s id associated to release')
        releases_list_parser.add_argument('--codeid', type=str, help='Operating System\'s code associated to release')
        # release create parser
        releases_create_parser = releases_subparsers.add_parser('create', help='Create a release')
        add_common_params(releases_create_parser)
        releases_create_parser.add_argument('--osid', type=str, help='Operating System\'s id associated to release')
        releases_create_parser.add_argument('--codeid', type=str, help='Operating System\'s code associated to release')
        releases_create_parser.add_argument('--version', required=True, type=str, help='OS Version')
        releases_create_parser.add_argument('--changelog', required=True, type=str, help='Os release changelog')
        releases_create_parser.add_argument('--deltasize', required=True, type=int, help='Delta size in MB')
        releases_create_parser.add_argument('--date', type=str, help='Release date (default: now)')
        releases_create_parser.add_argument('--dryrun', help='Remove the release after insert', action='store_true')
        # release delete parser
        releases_delete_parser = releases_subparsers.add_parser('delete', help='Delete a release')
        add_common_params(releases_delete_parser)
        releases_delete_parser.add_argument('--osid', type=str, help='Operating System\'s id associated to release')
        releases_delete_parser.add_argument('--codeid', type=str, help='Operating System\'s code associated to release')
        releases_delete_parser.add_argument('--releaseid', required=True, type=str, help='Release\'s id')

        # models parser
        models_parser = subparsers.add_parser('models', help='List all available models')
        models_subparsers = models_parser.add_subparsers(help='Operations on models public API', dest='action')
        models_subparsers.required = True
        # model list parser
        models_list_parser = models_subparsers.add_parser('list', help='List models')
        add_common_params(models_list_parser)

        # gateways parser
        gateways_parser = subparsers.add_parser('gateways', help='List all available public gateways')
        gateways_subparsers = gateways_parser.add_subparsers(help='Operations on gateways API', dest='action')
        gateways_subparsers.required = True
        # gateway list parser
        gateways_list_parser = gateways_subparsers.add_parser('list', help='List gateways')
        gateways_list_parser.add_argument('--unassociated', nargs="?", type=bool, default=False, help='Inflate the zip file')
        add_common_params(gateways_list_parser)
        # gateway add parser
        gateways_add_parser = gateways_subparsers.add_parser('add', help='Add a new gateway to user account''s company')
        add_common_params(gateways_add_parser)
        gateways_add_parser.add_argument('--serialnumber', metavar='K... CODE', type=str,
                                         help='Gateway Serial Number')
        gateways_add_parser.add_argument('--registrationcode', metavar='registration code', type=str,
                                         help='Gateway Serial Number')

        # devices parser
        devices_parser = subparsers.add_parser('devices', help='list all available devices')
        devices_subparsers = devices_parser.add_subparsers(help='Operations on devices API', dest='action')
        devices_subparsers.required = True
        # devices list
        devices_list_parser = devices_subparsers.add_parser('list', help='List all available devices')
        add_common_params(devices_list_parser)
        devices_list_parser.add_argument('--deviceid', nargs='?', help='Device ID')
        # devices add
        devices_add_parser = devices_subparsers.add_parser('add', help='Add new devices')
        add_common_params(devices_add_parser)
        devices_add_parser.add_argument('--gatewayid', help='Gateway ID')
        devices_add_parser.add_argument('--modelid', help='Gateway ID')
        devices_add_parser.add_argument('--serialnumber', help='Device serial number')
        devices_add_parser.add_argument('--name', help='Device name')
        devices_add_parser.add_argument('--notes', nargs='?', help='Device notes')
        # device provision
        devices_provision_parser = devices_subparsers.add_parser('provision', help='Provision a device')
        add_common_params(devices_provision_parser)
        devices_provision_parser.add_argument('--deviceid', help='Device ID')
        devices_provision_parser.add_argument('--gatewayserial', help='Gateway Serial number')
        # device decommission
        devices_decommission_parser = devices_subparsers.add_parser('decommission', help='End the life of a device')
        add_common_params(devices_decommission_parser)
        devices_decommission_parser.add_argument('--deviceid', help='Device ID')
        devices_decommission_parser.add_argument('--serialnumber', help='Device Serial number')
        # device reinstall os
        devices_reinstallos_parser = devices_subparsers.add_parser('reinstallos',
                                                                   help='Notify a firmware reset of a device')
        add_common_params(devices_reinstallos_parser)
        devices_reinstallos_parser.add_argument('--deviceid', help='Device ID')
        devices_reinstallos_parser.add_argument('--serialnumber', help='Device Serial number')
        # device reinstall os
        devices_replacegw_parser = devices_subparsers.add_parser('replacegw',
                                                                 help='Notify a gateway change on the device')
        add_common_params(devices_replacegw_parser)
        devices_replacegw_parser.add_argument('--deviceid', help='Device ID')
        devices_replacegw_parser.add_argument('--gatewayid', help='New Gateway ID')
        devices_replacegw_parser.add_argument('--serialnumber', help='Device Serial number')
        # apps parser
        apps_parser = subparsers.add_parser('apps', help='list all available apps')
        apps_subparsers = apps_parser.add_subparsers(help='Operations on apps API', dest='action')
        apps_subparsers.required = True
        # apps list
        apps_list_parser = apps_subparsers.add_parser('list', help='List all available apps')
        add_common_params(apps_list_parser)
        apps_list_parser.add_argument('--appid', nargs='?', help='Application ID')
        # apps add
        apps_add_parser = apps_subparsers.add_parser('add', help='Add a new app to your company')
        add_common_params(apps_add_parser)
        apps_add_parser.add_argument('--name', help='Application name')
        apps_add_parser.add_argument('--description', help='Application description')
        apps_add_parser.add_argument('--configfile', type=argparse.FileType('rb'), help='Configuration file')
        apps_add_parser.add_argument('--start', help='Start on Install or update', type=bool)
        apps_add_parser.add_argument('--tags', nargs='*', help='Application tags')
        apps_add_parser.add_argument('--gatewaymodels', nargs='+', help='Gateway models IDs', type=int)
        # apps edit DISABILITATO FINO A RIMOZIONE DI UPDATED_AT
        # apps_update_parser = apps_subparsers.add_parser('update', help='Update a app to your company')
        # add_common_params(apps_update_parser)
        # apps_update_parser.add_argument('--appid', nargs='?', help='Application ID')
        # apps_update_parser.add_argument('--name', help='Application name')
        # apps_update_parser.add_argument('--description', help='Application description')
        # apps_update_parser.add_argument('--configfile', type=argparse.FileType('rb'), help='Configuration file')
        # apps_update_parser.add_argument('--start', help='Start on Install or update', type=bool)
        # apps_update_parser.add_argument('--tags', nargs='*', help='Application tags')

        # file parser
        files_parser = subparsers.add_parser('files', help='list all available files')
        files_subparsers = files_parser.add_subparsers(help='Operations on files API', dest='action')
        files_subparsers.required = True
        # files list
        files_list_parser = files_subparsers.add_parser('list', help='List all available file models')
        add_common_params(files_list_parser)
        files_list_parser.add_argument('--fileid', nargs='?', help='File model ID')
        # files add
        files_add_parser = files_subparsers.add_parser('add', help='Add a new file model')
        add_common_params(files_add_parser)
        files_add_parser.add_argument('--name', help='File model name')
        files_add_parser.add_argument('--description', help='File model description')
        files_add_parser.add_argument('--file', type=argparse.FileType('rb'), help='Initial revision of the model')
        files_add_parser.add_argument('--inflate', nargs="?", type=bool, default=False, help='Inflate the zip file')
        files_add_parser.add_argument('--filedescription', help='Description for initial revision file')
        files_add_parser.add_argument('--remotepath', help='Destination path')
        files_add_parser.add_argument('--ack', help='Notify ack after download', type=bool)
        files_add_parser.add_argument('--tags', nargs='*', help='File model tags')
        # version list
        file_versions_list_parser = files_subparsers.add_parser('versions', help='List all available file versions')
        add_common_params(file_versions_list_parser)
        file_versions_list_parser.add_argument('--fileid', help='File model ID')
        file_versions_list_parser.add_argument('--versionid', nargs='?', help='File version ID')
        # files add version
        file_versions_add_parser = files_subparsers.add_parser('addversion', help='Add a new file model')
        add_common_params(file_versions_add_parser)
        file_versions_add_parser.add_argument('--fileid', help='File model ID')
        file_versions_add_parser.add_argument('--file', type=argparse.FileType('rb'),
                                              help='Initial revision of the model')
        file_versions_add_parser.add_argument('--inflate', nargs="?", type=bool, default=False,
                                              help='Inflate the zip file')
        file_versions_add_parser.add_argument('--filedescription', help='Description for initial revision file')
        # os campaign parser
        oscampaign_parser = subparsers.add_parser('oscampaign', help='list all available os campaign')
        oscampaign_subparsers = oscampaign_parser.add_subparsers(help='Operations on os campaign API', dest='action')
        oscampaign_subparsers.required = True
        # os campaign list
        oscampaign_list_parser = oscampaign_subparsers.add_parser('list', help='List all available os campaign')
        add_common_params(oscampaign_list_parser)
        oscampaign_list_parser.add_argument('--campaignid', nargs='?', help='Device ID')
        # os campaign add
        oscampaign_add_parser = oscampaign_subparsers.add_parser('add', help='Add new os campaign')
        add_common_params(oscampaign_add_parser)
        oscampaign_add_parser.add_argument('--name', help='Os campaign name')
        oscampaign_add_parser.add_argument('--osid', type=int, help='OS to update id')
        oscampaign_add_parser.add_argument('--timeout', nargs='?', default=30, help='Timeout in minutes')
        oscampaign_add_parser.add_argument('--rollout', nargs='?', default=5, help='Rollout Rate')
        oscampaign_add_parser.add_argument('--tags', nargs='*', help='Target devices tags')
        # os campaign start
        oscampaign_start_parser = oscampaign_subparsers.add_parser('start', help='List all available os campaign')
        add_common_params(oscampaign_start_parser)
        oscampaign_start_parser.add_argument('--campaignid', help='Device ID')
        # os campaign cancel
        oscampaign_cancel_parser = oscampaign_subparsers.add_parser('cancel', help='List all available os campaign')
        add_common_params(oscampaign_cancel_parser)
        oscampaign_cancel_parser.add_argument('--campaignid', help='Device ID')
        # app campaign parser
        appcampaign_parser = subparsers.add_parser('appcampaign', help='list all available app campaign')
        appcampaign_subparsers = appcampaign_parser.add_subparsers(help='Operations on app campaign API', dest='action')
        appcampaign_subparsers.required = True
        # app campaign list
        appcampaign_list_parser = appcampaign_subparsers.add_parser('list', help='List all available app campaign')
        add_common_params(appcampaign_list_parser)
        appcampaign_list_parser.add_argument('--campaignid', nargs='?', help='Device ID')
        # app campaign add
        appcampaign_add_parser = appcampaign_subparsers.add_parser('add', help='Add new app campaign')
        add_common_params(appcampaign_add_parser)
        appcampaign_add_parser.add_argument('--name', help='App campaign name')
        appcampaign_add_parser.add_argument('--appid', type=int, help='App to update id')
        appcampaign_add_parser.add_argument('--campaignop', choices=['install', 'update', 'install_update', 'start', 'stop'],
                                            help='Action executed by the campaign')
        appcampaign_add_parser.add_argument('--timeout', nargs='?', default=30, help='Timeout in minutes')
        appcampaign_add_parser.add_argument('--rollout', nargs='?', default=5, help='Rollout Rate')
        appcampaign_add_parser.add_argument('--tags', nargs='*', help='Target devices tags')
        # app campaign start
        appcampaign_start_parser = appcampaign_subparsers.add_parser('start', help='List all available app campaign')
        add_common_params(appcampaign_start_parser)
        appcampaign_start_parser.add_argument('--campaignid', help='Device ID')
        # app campaign cancel
        appcampaign_cancel_parser = appcampaign_subparsers.add_parser('cancel', help='List all available app campaign')
        add_common_params(appcampaign_cancel_parser)
        appcampaign_cancel_parser.add_argument('--campaignid', help='Device ID')
        # file campaign parser
        filecampaign_parser = subparsers.add_parser('filecampaign', help='list all available file campaign')
        filecampaign_subparsers = filecampaign_parser.add_subparsers(help='Operations on file campaign API',
                                                                     dest='action')
        filecampaign_subparsers.required = True
        # file campaign list
        filecampaign_list_parser = filecampaign_subparsers.add_parser('list', help='List all available file campaign')
        add_common_params(filecampaign_list_parser)
        filecampaign_list_parser.add_argument('--campaignid', nargs='?', help='Device ID')
        # file campaign add
        filecampaign_add_parser = filecampaign_subparsers.add_parser('add', help='Add new file campaign')
        add_common_params(filecampaign_add_parser)
        filecampaign_add_parser.add_argument('--name', help='File campaign name')
        filecampaign_add_parser.add_argument('--fileid', type=int, help='File to update id')
        filecampaign_add_parser.add_argument('--campaignop', choices=['install', 'update', 'install_update'],
                                             help='Action executed by the campaign')
        filecampaign_add_parser.add_argument('--timeout', nargs='?', default=30, help='Timeout in minutes')
        filecampaign_add_parser.add_argument('--rollout', nargs='?', default=5, help='Rollout Rate')
        filecampaign_add_parser.add_argument('--tags', nargs='*', help='Target devices tags')
        # file campaign start
        filecampaign_start_parser = filecampaign_subparsers.add_parser('start', help='List all available file campaign')
        add_common_params(filecampaign_start_parser)
        filecampaign_start_parser.add_argument('--campaignid', help='Device ID')
        # file campaign cancel
        filecampaign_cancel_parser = filecampaign_subparsers.add_parser('cancel',
                                                                        help='List all available file campaign')
        add_common_params(filecampaign_cancel_parser)
        filecampaign_cancel_parser.add_argument('--campaignid', help='Device ID')

        args = parser.parse_args()
        if args.pwd is None:
            user_password = ''
        else:
            user_password = args.pwd

        if args.user:
            while len(user_password) < 1:
                user_password = getpass.getpass("{} - password: ".format(args.user))

        if args.environment == 'test':
            used_base_url = TEST_BASE_URI
        elif args.environment == 'production':
            if not args.force:
                confirm = input('\n'
                                '*******************************************\n'
                                '|                 ATTENTION               |\n'
                                '*******************************************\n'
                                '\n'
                                'Are you sure you want to operate in production? [y/N]: ')
                if confirm != 'y':
                    print('Please select another environment')
                    return
            used_base_url = PRODUCTION_BASE_URI

        if args.operation == 'binding':
            psm.binding(used_base_url, args.user, user_password, company=args.company, hardware_id=args.hardwareid,
                        gateway_serial_number=args.serialnumber, input_file=args.input,
                        output_file=args.output, dryrun=args.dryrun)
        elif args.operation == 'deregister':
            psm.deregister(used_base_url, args.user, user_password, hardware_id=args.hardwareid)
        elif args.operation == 'companies':
            if args.action == 'list':
                companies.get_companies(used_base_url, args.user, user_password)
            elif args.action == 'getos':
                companies.get_os(used_base_url, args.user, user_password, company_code=args.companycode)
            elif args.action == 'addos':
                companies.add_os(used_base_url, args.user, user_password, company_code=args.companycode,
                                 os_code_id=args.oscode)
        elif args.operation == 'os':
            if args.action == 'list':
                operating_systems.get_oses(used_base_url, args.user, user_password, code_id=args.codeid)
            elif args.action == 'create':
                operating_systems.create_os(used_base_url, args.user, user_password, name=args.name,
                                            description=args.description, repository_url=args.url, code_id=args.codeid)
        elif args.operation == 'releases':
            if args.action == 'list':
                operating_systems.get_releases(used_base_url, args.user, user_password, os_id=args.osid,
                                               code_id=args.codeid)
            elif args.action == 'create':
                operating_systems.create_releases(used_base_url, args.user, user_password, os_id=args.osid,
                                                  version=args.version, changelog=args.changelog,
                                                  delta_size=args.deltasize, release_date=args.date,
                                                  code_id=args.codeid, dryrun=args.dryrun)
            elif args.action == 'delete':
                operating_systems.delete_releases(used_base_url, args.user, user_password, os_id=args.osid,
                                                  code_id=args.codeid, release_id=args.releaseid)
        elif args.operation == 'models':
            if args.action == 'list':
                models.get_models(used_base_url, args.user, user_password)
        elif args.operation == 'gateways':
            if args.action == 'list':
                gateways.get_gateways(used_base_url, args.user, user_password, args.unassociated)
            elif args.action == 'add':
                gateways.add_gateway(used_base_url, args.user, user_password, registration_code=args.registrationcode,
                                     serial_number=args.serialnumber)
        elif args.operation == 'apps':
            if args.action == 'list':
                applications.get_apps(used_base_url, args.user, user_password, app_id=args.appid)
            elif args.action == 'add':
                applications.add_app(used_base_url, args.user, user_password, name=args.name,
                                     description=args.description, file=args.configfile,
                                     start_on_install=args.start, gateway_model_ids=args.gatewaymodels, tags=args.tags)
            elif args.action == 'update':
                applications.update_app(used_base_url, args.user, user_password, name=args.name,
                                        description=args.description, file=args.configfile,
                                        start_on_install=args.start, app_id=args.appid, tags=args.tags)
        elif args.operation == 'files':
            if args.action == 'list':
                files.get_files(used_base_url, args.user, user_password, file_id=args.fileid)
            elif args.action == 'add':
                files.add_file(used_base_url, args.user, user_password, name=args.name,
                               description=args.description, file=args.file, file_description=args.filedescription,
                               inflate=args.inflate, ack=args.ack, remote_path=args.remotepath, tags=args.tags)
            elif args.action == 'versions':
                files.get_file_verions(used_base_url, args.user, user_password, file_id=args.fileid,
                                       version_id=args.versionid)
            elif args.action == 'addversion':
                files.add_version(used_base_url, args.user, user_password, file_id=args.fileid, file=args.file,
                                  file_description=args.filedescription, inflate=args.inflate)
        elif args.operation == 'devices':
            if args.action == 'list':
                devices.get_devices(used_base_url, args.user, user_password, args.deviceid)
            elif args.action == 'add':
                devices.add_device(used_base_url, args.user, user_password, args.gatewayid, args.modelid,
                                   args.serialnumber, args.name, args.notes)
            elif args.action == 'provision':
                devices.provision(used_base_url, args.user, user_password, args.deviceid, args.gatewayserial)
            elif args.action == 'decommission':
                devices.decommission(used_base_url, args.user, user_password, args.deviceid, args.serialnumber)
            elif args.action == 'reinstallos':
                devices.reinstall_os(used_base_url, args.user, user_password, args.deviceid, args.serialnumber)
            elif args.action == 'replacegw':
                devices.replace_gw(used_base_url, args.user, user_password, args.deviceid, args.gatewayid,
                                   args.serialnumber)
        elif args.operation == 'oscampaign':
            if args.action == 'list':
                os_campaign.get_os_campaigns(used_base_url, args.user, user_password, args.campaignid)
            elif args.action == 'add':
                os_campaign.add(used_base_url, args.user, user_password, args.name, args.osid, args.tags,
                                timeout=args.timeout, rollout_rate=args.rollout)
            elif args.action == 'start':
                os_campaign.start_cancel(used_base_url, args.user, user_password, args.campaignid, False)
            elif args.action == 'cancel':
                os_campaign.start_cancel(used_base_url, args.user, user_password, args.campaignid, True)
        elif args.operation == 'filecampaign':
            if args.action == 'list':
                file_campaign.get_file_campaigns(used_base_url, args.user, user_password, args.campaignid)
            elif args.action == 'add':
                file_campaign.add(used_base_url, args.user, user_password, args.name, args.fileid, args.tags,
                                  operation=args.campaignop, timeout=args.timeout, rollout_rate=args.rollout)
            elif args.action == 'start':
                file_campaign.start_cancel(used_base_url, args.user, user_password, args.campaignid, False)
            elif args.action == 'cancel':
                file_campaign.start_cancel(used_base_url, args.user, user_password, args.campaignid, True)
        elif args.operation == 'appcampaign':
            if args.action == 'list':
                apps_campaign.get_app_campaigns(used_base_url, args.user, user_password, args.campaignid)
            elif args.action == 'add':
                apps_campaign.add(used_base_url, args.user, user_password, args.name, args.appid, args.tags,
                                  operation=args.campaignop, timeout=args.timeout, rollout_rate=args.rollout)
            elif args.action == 'start':
                apps_campaign.start_cancel(used_base_url, args.user, user_password, args.campaignid, False)
            elif args.action == 'cancel':
                apps_campaign.start_cancel(used_base_url, args.user, user_password, args.campaignid, True)

    except KeyboardInterrupt:
        print('Interrupted')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)


def add_common_params(subparser: argparse.ArgumentParser):
    subparser.add_argument('-u', '--user', required=True, type=str, help='User email')
    subparser.add_argument('-p', '--pwd', type=str, help='User password')
    subparser.add_argument('-e', '--environment', choices=['test', 'staging', 'production'],
                           help='Set the base URI (default: staging)')
    subparser.add_argument('-f', '--force', action="store_true",
                           help='Detached mode, does not show any warning if production environment is selected')


if __name__ == "__main__":
    main()
